#!/usr/bin/env bash

# gitdiff - Generate AI-powered descriptions of git changes
#
# This script analyzes your git repository's current changes and uses AI to generate
# a natural language description of the modifications. It works with both staged and
# unstaged changes.
#
# Usage:
#   gitdiff [-s]
#
# Options:
#   -s    Save the AI-generated description to gitdiff.txt in the current directory
#         By default, output is printed to stdout
#
# Examples:
#   # Print changes to stdout
#   gitdiff
#
#   # Save changes to gitdiff.txt
#   gitdiff -s
#
# Notes:
#   - Requires git to be installed and run from within a git repository
#   - Uses the targon CLI tool to generate AI descriptions
#   - Reads prompt template from .prompts/gitdiff.txt
#   - Will exit with error if no changes are detected or if git commands fail

# Get the script's directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Parse command line arguments
SAVE_FILE=false
while getopts "s" opt; do
    case $opt in
        s) SAVE_FILE=true ;;
        *) echo "Usage: $0 [-s]" >&2
           echo "  -s: Save output to gitdiff.txt" >&2
           exit 1 ;;
    esac
done

# Get the git diff
DIFF=$(git diff)
if [ $? -ne 0 ]; then
    echo "Error: Failed to get git diff" >&2
    exit 1
fi

# Get deleted files
DELETED_FILES=$(git ls-files --deleted)
DELETED_CONTENT=""
if [ -n "$DELETED_FILES" ]; then
    DELETED_CONTENT="\n\nDeleted files:\n$DELETED_FILES"
fi

# Get untracked files that aren't gitignored
UNTRACKED_FILES=$(git ls-files --others --exclude-standard)
UNTRACKED_CONTENT=""
if [ -n "$UNTRACKED_FILES" ]; then
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            UNTRACKED_CONTENT="${UNTRACKED_CONTENT}\n\nNew file: ${file}\n$(cat "$file")"
        fi
    done <<< "$UNTRACKED_FILES"
fi

# Check if we have any changes at all
if [ -z "$DIFF" ] && [ -z "$UNTRACKED_CONTENT" ] && [ -z "$DELETED_CONTENT" ]; then
    echo "No changes, new files, or deleted files found" >&2
    exit 0
fi

# Pass the diff to targon with the gitdiff prompt using relative path
# Get the prompt text
PROMPT=$(cat "${SCRIPT_DIR}/../.prompts/gitdiff.txt")
if [ $? -ne 0 ]; then
    echo "Error: Failed to read prompt file" >&2
    exit 1
fi

# Combine prompt with diff, untracked files, deleted files and add assistant tag
FULL_PROMPT="${PROMPT}\nGit Diff:\n${DIFF}\nUNTRACKED CONTENT:\n${UNTRACKED_CONTENT}\nDELETED CONTENT:\n${DELETED_CONTENT}\n<|assistant|>\`\`\`diff\n\n"

# Pass to targon with optional file output
if [ "$SAVE_FILE" = true ]; then
    targon -O gitdiff.txt -I -W "$FULL_PROMPT" | sed 's/```.*$//'
else
    targon -I -W "$FULL_PROMPT" | sed 's/```.*$//'
fi
